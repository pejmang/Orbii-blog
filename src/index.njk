{% extends "sitebase.njk" %}

{% block title %}Orbii, Digital Transformation, Innovation & AI{% endblock %}

{% block site_content %}
  <div class="container">
    <h2 class="section-title">Les chroniques de l'Innovation</h2>

    <div class="posts-grid">
      {% for post in collections.fr_posts %}
      <a href="{{ post.url }}" class="post-card-link">
        <div class="post-card" data-post-id="{{ post.data.articleID }}">
          {% if post.data.type %}
          <div class="post-header">
            <img src="/images/ic/i-{{ post.data.type }}.png" alt="{{ post.data.type }}" class="post-icon">
            <button class="recommend-flag" onclick="event.preventDefault(); handleRecommend(this)">
              <span class="recommend-count">0</span>
              <img src="/images/ic/i-value.png" alt="Recommander" width="20" height="20">
            </button>
          </div>
          {% endif %}

          <div class="post-content">
            <div class="post-title">{{ post.data.title }}</div>
            <div class="post-teaser">{{ post.data.teaser }}</div>
            <div class="post-meta">
              <span class="post-author">{{ post.data.author }}</span>
            </div>
          </div>
        </div>
      </a>
      {% endfor %}
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

  <script>
    document.addEventListener('DOMContentLoaded', async () => {
      const likedArticles = JSON.parse(localStorage.getItem('likedArticles')) || [];
      const postCards = document.querySelectorAll('.post-card');

      for (const card of postCards) {
        const articleID = card.dataset.postId;
        const button = card.querySelector('.recommend-flag');
        const recommendCountElement = button.querySelector('.recommend-count');

        try {
          const response = await fetchRecommendationCount(articleID);
          if (response) {
            const totalRecommendations = response.recommendations || 0;
            recommendCountElement.textContent = totalRecommendations;
            if (likedArticles.includes(articleID)) {
              button.classList.add('already-recommended');
            }
          } else {
            recommendCountElement.textContent = '0';
          }
        } catch (error) {
          console.error(`Error fetching recommendation count for articleID: ${articleID}`, error);
          recommendCountElement.textContent = '0';
        }
      }
    });

    async function fetchRecommendationCount(articleID) {
      try {
        const response = await axios.get(`http://localhost:3000/api/recommendations/${articleID}`);
        return response.data;
      } catch (error) {
        console.error(`Error fetching recommendation count for articleID: ${articleID}`, error);
        return null;
      }
    }

    function handleRecommend(button) {
      const postCard = button.closest('.post-card');
      const articleID = postCard.dataset.postId;

      if (!articleID) {
        return;
      }

      const likedArticles = JSON.parse(localStorage.getItem('likedArticles')) || [];

      if (likedArticles.includes(articleID)) {
        return;
      }

      const recommendCountElement = button.querySelector('.recommend-count');
      if (recommendCountElement) {
        let recommendCount = parseInt(recommendCountElement.textContent) + 1;
        recommendCountElement.textContent = recommendCount;

        likedArticles.push(articleID);
        localStorage.setItem('likedArticles', JSON.stringify(likedArticles));

        recommendArticle(articleID, recommendCount);
      }
    }

    async function recommendArticle(articleID, recommendCount) {
      try {
        await axios.post('http://localhost:3000/api/recommendations', {
          articleID: articleID,
          recommendCount: recommendCount,
        });
      } catch (error) {
        console.error(`Error recommending articleID: ${articleID}`, error);
      }
    }
  </script>
{% endblock %}
