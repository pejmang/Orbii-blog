{% block site_content %}

<svg width="350" height="350" viewBox="0 0 350 350" preserveAspectRatio="xMidYMid meet"></svg>
<!-- Div to display the company name -->
<div id="company-name" style="font-size: 20px; font-weight: bold; margin-top: 10px;"></div>
<script src="https://d3js.org/d3.v6.min.js"></script>
<script>
  // Define the data: nodes (pillars)
  const nodes = [
    { id: "Culture", group: 1 },
    { id: "Stratégie", group: 2 },
    { id: "Makers", group: 3 },
    { id: "Talents", group: 4 },
    { id: "Clients", group: 5 },
    { id: "Data & IA", group: 6 },
    { id: "Tech", group: 7 },
    { id: "Décisions", group: 8 },
    { id: "Vélocité", group: 9 },
  ];

  // List of fictitious companies
  const companies = [
    "Entreprise Beta", 
    "Startup BC", 
    "Société Alpha", 
    "Tech Dynamics", 
    "Innovate Inc.", 
    "Future Ventures", 
    "DataFlow Corp", 
    "Quantum Start", 
    "Pionniers Digitaux"
  ];

  // Color scheme for the bubbles
  const color = d3.scaleOrdinal(d3.schemeCategory10);

  // Function to generate random weights and number of links
  function generateRandomLinks() {
    let links = [];
    const maxLinks = 6; // Maximum of 6 random links

    // Generate random links
    for (let i = 0; i < maxLinks; i++) {
      // Pick two random nodes
      const sourceNode = nodes[Math.floor(Math.random() * nodes.length)];
      const targetNode = nodes[Math.floor(Math.random() * nodes.length)];

      // Ensure the source and target are not the same
      if (sourceNode !== targetNode) {
        // Generate a random weight between 1 and 9
        const randomWeight = Math.floor(Math.random() * 9) + 1;

        // Create the link with a random weight
        links.push({
          source: sourceNode.id,
          target: targetNode.id,
          value: randomWeight,
        });
      }
    }

    // Ensure all nodes are indirectly connected (spanning tree logic)
    const connectedNodes = new Set();
    connectedNodes.add(nodes[0].id); // Start with the first node connected

    // Create a tree structure to ensure all nodes are connected
    nodes.forEach((node, index) => {
      if (!connectedNodes.has(node.id)) {
        const connectedNode = nodes[Math.floor(Math.random() * connectedNodes.size)];
        const randomWeight = Math.floor(Math.random() * 9) + 1;

        // Add a link to connect the unconnected node to the connected set
        links.push({
          source: node.id,
          target: connectedNode.id,
          value: randomWeight,
        });
        connectedNodes.add(node.id);
      }
    });

    return links;
  }

  // Initial setup
  let links = generateRandomLinks();

  const svg = d3.select("svg"),
        width = +svg.attr("width"),
        height = +svg.attr("height");

  // Initialize the force-directed graph simulation
  const simulation = d3.forceSimulation(nodes)
    .force("link", d3.forceLink(links).id(d => d.id).distance(200))
    .force("charge", d3.forceManyBody().strength(-50))
    .force("center", d3.forceCenter(width / 2, height / 2))
    .force("x", d3.forceX(width / 2).strength(0.05))
    .force("y", d3.forceY(height / 2).strength(0.05));

  const linkGroup = svg.append("g").attr("class", "links");
  const nodeGroup = svg.append("g").attr("class", "nodes");
  const labelGroup = svg.append("g").attr("class", "labels");

  function renderGraph() {
    // Clear old links
    linkGroup.selectAll("line").remove();

    // Render links
    const link = linkGroup.selectAll("line")
      .data(links)
      .enter()
      .append("line")
      .attr("class", "link")
      .style("stroke", "#999")
      .style("stroke-opacity", 0.6)
      .style("stroke-width", d => d.value); // Set stroke width based on weight

    // Render nodes
    const node = nodeGroup.selectAll("circle")
      .data(nodes)
      .join("circle")
      .attr("class", "node")
      .attr("r", 20)
      .style("fill", d => color(d.group))
      .style("stroke", "#fff")
      .style("stroke-width", 1.5)
      .call(d3.drag()
        .on("start", dragstarted)
        .on("drag", dragged)
        .on("end", dragended));

    // Render labels
    const label = labelGroup.selectAll("text")
      .data(nodes)
      .join("text")
      .attr("dy", -25)
      .attr("dx", -20)
      .text(d => d.id)
      .style("font-size", "12px")
      .style("fill", "#000");

    simulation.on("tick", () => {
      link
        .attr("x1", d => d.source.x)
        .attr("y1", d => d.source.y)
        .attr("x2", d => d.target.x)
        .attr("y2", d => d.target.y);

      node
        .attr("cx", d => d.x)
        .attr("cy", d => d.y);

      label
        .attr("x", d => d.x)
        .attr("y", d => d.y);
    });
  }

  // Initial render
  renderGraph();

  // Function to reset all links and re-render the graph every 4 seconds
  function resetLinksAndGraph() {
    // Generate new links with random weights
    links = generateRandomLinks();

    // Update the simulation with the new links
    simulation.force("link").links(links);

    // Restart the simulation
    simulation.alpha(1).restart();

    // Re-render the graph with the new links
    renderGraph();

    // Pick a new company name to display
    const randomCompany = companies[Math.floor(Math.random() * companies.length)];
    document.getElementById("company-name").textContent = "Simulation for: " + randomCompany;
  }

  // Set interval to reset all links and graph every 4 seconds
  setInterval(resetLinksAndGraph, 4000);

  // Drag functions to control node behavior during drag events
  function dragstarted(event, d) {
    if (!event.active) simulation.alphaTarget(0.3).restart();
    d.fx = d.x;
    d.fy = d.y;
  }

  function dragged(event, d) {
    d.fx = event.x;
    d.fy = event.y;
  }

  function dragended(event, d) {
    if (!event.active) simulation.alphaTarget(0);
    d.fx = null;
    d.fy = null;
  }
</script>

{% endblock %}
