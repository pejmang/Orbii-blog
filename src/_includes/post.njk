{% extends "base.njk" %}

{% block title %}{{ title }}{% endblock %}

{% block content %}
  <link rel="stylesheet" href="/styles/style.css">
  <div class="container">
    <div class="extended">
      {% if lang == "en" %}
        <a href="/en/">Insights</a>
      {% else %}
        <a href="/">Insights</a>
      {% endif %}
    </div>
    
    <main id="article">
      <h1>{{ title }}</h1>
      {% if authors %}
        <div class="extended">
          Auteur : {{ authors }}
          <a href="/about/" class="no-hover-effect">
            <img src="/images/ic/i-networking.png" alt="Networking Icon" title="Networking Icon" style="width: 30px; height: auto;">
          </a>
          {% if date %}
            <div class="article-date">
              Publié le : {{ date | date("dd/MM/yyyy") }}
            </div>
            <div class="article-recommendation">
              <span>Article recommandé :</span>
              <button class="recommend-button" onclick="handleRecommendClick()">
                <img src="/images/ic/i-value.png" alt="Networking Icon" title="Networking Icon" width="24" height="24">
                <span class="recommend-count" id="recommend-count">0</span>
              </button>
            </div>
          {% endif %}
        </div>
      {% endif %}

      {{ content | safe }}
      <br>

<div class="article-recommendation">
  <span class="recommendation-text">
    Si l'article a été utile, recommandez-le :
  </span>
  <button class="recommend-button" onclick="handleRecommendClick()">
    <img src="/images/ic/i-value.png" alt="Recommander" width="24" height="24">
    <span class="recommend-count" id="recommend-count-bottom">0</span>
  </button>
</div>

<div class="share-container">
  <h3>Partagez cet article :</h3>
  <a href="https://www.linkedin.com/shareArticle?url={url}" target="_blank" class="linkedin linkedin-icon">
    <img src="/images/ic/i-linkedin.png" alt="LinkedIn Icon" title="Partagez sur LinkedIn">
    <span>LinkedIn</span>
  </a>
</div>



  <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

  <script>
    const AIRTABLE_BASE_ID = '{{ env.AIRTABLE_BASE_ID }}';
    const AIRTABLE_API_KEY = '{{ env.AIRTABLE_API_KEY }}';
    const AIRTABLE_TABLE_NAME = '{{ env.AIRTABLE_TABLE_NAME }}';
    const articleID = '{{ articleID }}'; // Make sure to pass this from your data

    document.addEventListener('DOMContentLoaded', async () => {
      try {
        const response = await fetchRecommendationCount(articleID);
        if (response) {
          const totalRecommendations = response.fields.Recommendations || 0;
          document.getElementById('recommend-count').textContent = totalRecommendations;
          document.getElementById('recommend-count-bottom').textContent = totalRecommendations;
        }
      } catch (error) {
        // Handle error silently
      }
    });

    async function fetchRecommendationCount(articleID) {
      const recordURL = `https://api.airtable.com/v0/${AIRTABLE_BASE_ID}/${AIRTABLE_TABLE_NAME}`;
      const filterFormula = `filterByFormula=articleID="${articleID}"`;
      const url = `${recordURL}?${filterFormula}`;

      const response = await axios.get(url, {
        headers: {
          Authorization: `Bearer ${AIRTABLE_API_KEY}`,
        },
      });

      if (response.data.records.length > 0) {
        return response.data.records[0];
      } else {
        return null;
      }
    }

    function handleRecommendClick() {
      const likedArticles = JSON.parse(localStorage.getItem('likedArticles')) || [];

      if (likedArticles.includes(articleID)) {
        return;
      }

      likedArticles.push(articleID);
      localStorage.setItem('likedArticles', JSON.stringify(likedArticles));

      const topCountElement = document.getElementById('recommend-count');
      const bottomCountElement = document.getElementById('recommend-count-bottom');
      let recommendCount = parseInt(topCountElement.textContent) + 1;

      topCountElement.textContent = recommendCount;
      bottomCountElement.textContent = recommendCount;

      recommendArticle(articleID, recommendCount);
    }

    async function recommendArticle(articleID, recommendCount) {
      const recordURL = `https://api.airtable.com/v0/${AIRTABLE_BASE_ID}/${AIRTABLE_TABLE_NAME}`;
      const filterFormula = `filterByFormula=articleID="${articleID}"`;
      const url = `${recordURL}?${filterFormula}`;

      try {
        const response = await axios.get(url, {
          headers: {
            Authorization: `Bearer ${AIRTABLE_API_KEY}`,
          },
        });

        const dateNow = new Date().toISOString().split('T')[0];

        if (response.data.records.length > 0) {
          const recordId = response.data.records[0].id;
          const currentRecommendations = response.data.records[0].fields.Recommendations || 0;

          const updateData = {
            fields: {
              Recommendations: currentRecommendations + 1,
              "Last-Recommended-By": "Un utilisateur unique",
              "Date of Last Recommendation": dateNow,
            },
          };

          await axios.patch(
            `${recordURL}/${recordId}`,
            updateData,
            {
              headers: {
                Authorization: `Bearer ${AIRTABLE_API_KEY}`,
              },
            }
          );
        } else {
          const postData = {
            fields: {
              articleID: articleID,
              Recommendations: recommendCount,
              "Last-Recommended-By": "Un utilisateur unique",
              "Date of Last Recommendation": dateNow,
            },
          };

          await axios.post(
            recordURL,
            postData,
            {
              headers: {
                Authorization: `Bearer ${AIRTABLE_API_KEY}`,
              },
            }
          );
        }
      } catch (error) {
        // Handle error silently
      }
    }
  </script>
{% endblock %}
